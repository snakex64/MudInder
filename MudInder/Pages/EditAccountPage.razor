@inject Services.AuthService AuthService
@inject AzureFunctionsClient AzureFunctionsClient

@using Microsoft.AspNetCore.Components.Forms

<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="4" Style="height: 100%; overflow-y: auto">


	<MudText Typo="Typo.h2" Class="my-5 pt-2">
		MudInder
	</MudText>

	<MudForm @ref="Form">

		<InputFile id="fileInput112" OnChange="DownloadSelectedFiles" hidden multiple accept=".jpg, .jpeg, .png" />

		@if (LoadingImages)
		{
			<MudPaper Class="ma-5">
				<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
			</MudPaper>
		}
		else
		{
			@if (Images.Count < MaxImages)
			{

				<MudButton HtmlTag="label" Class="ma-2"
				   Variant="Variant.Filled"
				   Color="Color.Primary"
				   StartIcon="@Icons.Filled.CloudUpload"
				   for="fileInput112">
					Upload your images
				</MudButton>
			}

			@if (Images.Count != 0)
			{
				<div style="width: 100%; height: 220px; overflow-y: auto; overflow-x: hidden">
					<MudGrid Class="ma-2">
						@foreach (var image in Images)
						{
							var i = image;
							<MudItem Class="relative">
								<MudImage Src="@("data:image/png;base64, " + image.Base64)" Width="100" Elevation="25" Class="rounded-lg" />
								<MudIconButton Style="position: absolute; right: 5px; top: 5px" Icon="@Icons.Filled.Close" Color="Color.Error" OnClick="() => RemoveImage(i)"></MudIconButton>
							</MudItem>
						}
					</MudGrid>
				</div>
			}

		}
		<MudTextField T="string" Label="Displayed name" Variant="Variant.Outlined" @bind-Value="DisplayedName" Required="true" Class="ma-2"></MudTextField>

		<MudTextField T="string" Label="Description" @bind-Value="Description" Variant="Variant.Outlined" Required="true" Lines="6" MaxLength="1000" Class="ma-2"></MudTextField>

		<MudNumericField T="int" Label="Age" @bind-Value="Age" Min="18" Max="100" Variant="Variant.Outlined" Required="true" Class="ma-2"></MudNumericField>


		<MudStack Row="true" Spacing="0" Justify="Justify.Center" Class="ma-2">
			<MudButton OnClick="FillFromProfile" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" Class="rounded-r-0">Cancel</MudButton>
			<MudPaper Elevation="0" Width="4px" Class="d-flex align-center justify-center relative pointer-events-none">
				<MudPaper Elevation="0" Height="24px" Width="24px" Class="absolute rounded-circle z-20 d-flex align-center justify-center">
					<MudText Typo="Typo.caption">or</MudText>
				</MudPaper>
			</MudPaper>
			<MudButton OnClick="SaveProfile" Variant="Variant.Filled" Color="Color.Default" DisableElevation="true" Class="rounded-l-0" Disabled="!Form.IsValid">Save</MudButton>
		</MudStack>

	</MudForm>


</MudStack>

@code {
	private record class DropItem(byte[] Raw, string Base64);

	private static int MaxImages = 6;

	private string DisplayedName { get; set; } = null!;

	private string Description { get; set; } = null!;

	private int Age { get; set; }

	private MudForm Form { get; set; } = null!;

	private List<DropItem> Images { get; set; } = new();

	private bool LoadingImages { get; set; } = true;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		FillFromProfile();
	}

	private async Task DownloadSelectedFiles(InputFileChangeEventArgs e)
	{
		try
		{
			LoadingImages = true;
			StateHasChanged();

			var entries = e.GetMultipleFiles(MaxImages - Images.Count);

			foreach (var file in entries)
			{
				var bytes = new byte[file.Size];
				await using var stream = file.OpenReadStream();
				await stream.ReadAsync(bytes);

				Images.Add(new DropItem(bytes, Convert.ToBase64String(bytes)));
			}

			Form.Validate();
		}
		catch (Exception ex)
		{
		}
		LoadingImages = false;
		StateHasChanged();
	}

	private async Task RemoveImage(DropItem i)
	{
		Images.Remove(i);
		Form.Validate();
	}

	// fill page info from current profile
	private async Task FillFromProfile()
	{
		var profile = AuthService.ProfileInfo;

		DisplayedName = profile?.DisplayedName ?? "";
		Description = profile?.Description ?? "";
		Age = profile?.Age ?? 18;


		LoadingImages = true;
		var result = await AzureFunctionsClient.GetMyProfile(new AzureFunctionsClient.GetMyProfileArgs()
			{
				IncludeImages = true
			});

		Images.Clear();
		Images.AddRange(result.Images.Select(x => new DropItem(x.Value, Convert.ToBase64String(x.Value))));

		LoadingImages = false;
		StateHasChanged();

	}

	// Save the profile
	private async Task SaveProfile()
	{
		var profile = new AzureFunctionsClient.ProfileInfo
			{
				DisplayedName = DisplayedName,
				Description = Description,
				Age = Age
			};

		AuthService.ProfileInfo = profile;

		await AzureFunctionsClient.UpdateProfile(new AzureFunctionsClient.UpdateProfileArgs()
			{
				ProfileInfo = profile,
				Images = Images.Select((x, i) => new { x, i }).ToDictionary(x => x.i, x => x.x.Raw)
			});

	}


}
